{"ast":null,"code":"var _jsxFileName = \"/Users/emmanueliyanu/Documents/React-Apps/Weather-App/src/App.js\";\nimport React, { Component } from 'react';\nimport Weather from './app_component/weather.component';\nimport Form from './app_component/form.component'; // import 'bootstrap/dist/css/bootstrap.min.css'\n// import 'weather-icons/css/weather-icons.css'\n\nconst API_Key = \"\";\n\nclass App extends Component {\n  constructor() {\n    //exp for this\n    super(); //exp for this\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n\n      if (city && country) {\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_Key}`);\n        const response = await api_call.json();\n        console.log(response);\n        this.setState({\n          city: `${response.name}, ${response.sys.country}`,\n          celsius: this.calCelsius(response.main.temp),\n          temp_max: this.calCelsius(response.main.temp_max),\n          temp_min: this.calCelsius(response.main.temp_min),\n          description: response.weather[0].description,\n          error: false\n        });\n        this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: '',\n      error: false\n    }; // this.getWeather();\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-select\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-frog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icon, rangeid) {\n    switch (true) {\n      case rangeid >= 200 && rangeid <= 232:\n        this.setState({\n          icon: this.weatherIcon.Thunderstorm\n        });\n        break;\n\n      case rangeid >= 300 && rangeid <= 321:\n        this.setState({\n          icon: this.weatherIcon.Drizzle\n        });\n        break;\n\n      case rangeid >= 500 && rangeid <= 531:\n        this.setState({\n          icon: this.weatherIcon.Rain\n        });\n        break;\n\n      case rangeid >= 600 && rangeid <= 621:\n        this.setState({\n          icon: this.weatherIcon.Snow\n        });\n        break;\n\n      case rangeid >= 700 && rangeid <= 781:\n        this.setState({\n          icon: this.weatherIcon.Atmosphere\n        });\n        break;\n\n      case rangeid === 800:\n        this.setState({\n          icon: this.weatherIcon.Clear\n        });\n        break;\n\n      case rangeid >= 801 && rangeid <= 804:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Form, {\n      loadWeather: this.getWeather,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      city: this.state.city,\n      country: this.state.country,\n      temp_celsius: this.state.celsius,\n      temp_max: this.state.temp_max,\n      temp_min: this.state.temp_min,\n      description: this.state.description,\n      weatherIcon: this.state.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/emmanueliyanu/Documents/React-Apps/Weather-App/src/App.js"],"names":["React","Component","Weather","Form","API_Key","App","constructor","getWeather","e","preventDefault","city","target","elements","value","country","api_call","fetch","response","json","console","log","setState","name","sys","celsius","calCelsius","main","temp","temp_max","temp_min","description","weather","error","get_WeatherIcon","weatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","cell","Math","floor","rangeid","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Weather from './app_component/weather.component';\nimport Form from './app_component/form.component'\n// import 'bootstrap/dist/css/bootstrap.min.css'\n// import 'weather-icons/css/weather-icons.css'\n\nconst API_Key = \"\";\n\nclass App extends Component {\n  constructor() { //exp for this\n    super();      //exp for this\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: '',\n      error: false\n    }\n    // this.getWeather();\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-select\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-frog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n  get_WeatherIcon(icon, rangeid) {\n    switch (true) {\n      case rangeid >= 200 && rangeid <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case rangeid >= 300 && rangeid <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case rangeid >= 500 && rangeid <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n      case rangeid >= 600 && rangeid <= 621:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case rangeid >= 700 && rangeid <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n      case rangeid === 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n      case rangeid >= 801 && rangeid <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds })\n    }\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if (city && country) {\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_Key}`);\n      const response = await api_call.json();\n      console.log(response)\n\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id)\n    } else {\n      this.setState({\n        error: true\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadWeather={this.getWeather} error={this.state.error} />\n        <Weather city={this.state.city}\n          country={this.state.country}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}